#!/bin/bash

vendor_lib() {
    LIBRARY=$1
    VERSION=$2
    VENDOR_DIR=$3

    echo "-----> Installing $LIBRARY-$VERSION"
    LIBRARY_URL="https://heroku-buildpack-geo.s3.amazonaws.com/${STACK}/${LIBRARY}/${LIBRARY}-${VERSION}.tar.gz"

    mkdir -p "$VENDOR_DIR"
    if ! curl -sSf --retry 3 --retry-connrefused --connect-timeout 10 "${LIBRARY_URL}" | tar -zx -C "${VENDOR_DIR}"; then
      echo " !     Error: ${LIBRARY} version '${VERSION}' is not available for this stack (${STACK})." >&2
      echo " !     Try requesting a different version using the env var '${LIBRARY}_VERSION', or" >&2
      echo " !     unset the env var and clear the build cache to use the default version." >&2
      echo " !     See: https://github.com/heroku/heroku-geo-buildpack#available-versions" >&2
      exit 1
    fi

    mkdir -p "$CACHE_DIR/.heroku-geo-buildpack/"
    # Store library version for future reference
    echo "$VERSION" > "$CACHE_DIR/.heroku-geo-buildpack/$LIBRARY-version"
}

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BP_DIR=$(cd "$(dirname "${0:-}")" || exit 1 ; cd ..; pwd)

VENDOR_DIR="$BUILD_DIR/.heroku-geo-buildpack/vendor"

DEFAULT_GDAL_VERSION="3.5.0"
DEFAULT_GEOS_VERSION="3.10.2"
DEFAULT_PROJ_VERSION="8.2.1"

if [ -f "$ENV_DIR/GDAL_VERSION" ]; then
    GDAL_VERSION=$(cat "$ENV_DIR/GDAL_VERSION")
    echo "-----> Using GDAL version specified by GDAL_VERSION: ${GDAL_VERSION}."
elif [ -f "$CACHE_DIR/.heroku-geo-buildpack/GDAL-version" ]; then
    GDAL_VERSION=$(cat "$CACHE_DIR/.heroku-geo-buildpack/GDAL-version")
    echo "-----> GDAL_VERSION is not set. Using the same version as the last build: ${GDAL_VERSION}."
else
    GDAL_VERSION=$DEFAULT_GDAL_VERSION
    echo "-----> GDAL_VERSION is not set. Using the buildpack default: ${GDAL_VERSION}."
fi

if [ -f "$ENV_DIR/GEOS_VERSION" ]; then
    GEOS_VERSION=$(cat "$ENV_DIR/GEOS_VERSION")
    echo "-----> Using GEOS version specified by GEOS_VERSION: ${GEOS_VERSION}."
elif [ -f "$CACHE_DIR/.heroku-geo-buildpack/GEOS-version" ]; then
    GEOS_VERSION=$(cat "$CACHE_DIR/.heroku-geo-buildpack/GEOS-version")
    echo "-----> GEOS_VERSION is not set. Using the same version as the last build: ${GEOS_VERSION}."
else
    GEOS_VERSION=$DEFAULT_GEOS_VERSION
    echo "-----> GEOS_VERSION is not set. Using the buildpack default: ${GEOS_VERSION}."
fi

if [ -f "$ENV_DIR/PROJ_VERSION" ]; then
    PROJ_VERSION=$(cat "$ENV_DIR/PROJ_VERSION")
    echo "-----> Using PROJ version specified by PROJ_VERSION: ${PROJ_VERSION}."
elif [ -f "$CACHE_DIR/.heroku-geo-buildpack/PROJ-version" ]; then
    PROJ_VERSION=$(cat "$CACHE_DIR/.heroku-geo-buildpack/PROJ-version")
    echo "-----> PROJ_VERSION is not set. Using the same version as the last build: ${PROJ_VERSION}."
else
    PROJ_VERSION=$DEFAULT_PROJ_VERSION
    echo "-----> PROJ_VERSION is not set. Using the buildpack default: ${PROJ_VERSION}."
fi

vendor_lib "GDAL" "$GDAL_VERSION" "$VENDOR_DIR"
vendor_lib "GEOS" "$GEOS_VERSION" "$VENDOR_DIR"
vendor_lib "PROJ" "$PROJ_VERSION" "$VENDOR_DIR"

# Set environment variables for later buildpacks, so that the GDAL installation
# can be found when pip installing GDAL, or by Django (eg during collectstatic).
{
  echo "export GDAL_LIBRARY_PATH=\"$BUILD_DIR/.heroku-geo-buildpack/vendor/lib/libgdal.so\""
  echo "export GEOS_LIBRARY_PATH=\"$BUILD_DIR/.heroku-geo-buildpack/vendor/lib/libgeos_c.so\""
  echo "export PROJ4_LIBRARY_PATH=\"$BUILD_DIR/.heroku-geo-buildpack/vendor/lib/libproj.so\""
  echo "export GDAL_DATA=\"$BUILD_DIR/.heroku-geo-buildpack/vendor/share/gdal\""
  echo "export PATH=\"$BUILD_DIR/.heroku-geo-buildpack/vendor/bin:\$PATH\""
  echo "export LIBRARY_PATH=\"$BUILD_DIR/.heroku-geo-buildpack/vendor/lib:\$LIBRARY_PATH\""
  echo "export LD_LIBRARY_PATH=\"$BUILD_DIR/.heroku-geo-buildpack/vendor/lib:\$LD_LIBRARY_PATH\""
  echo "export CPLUS_INCLUDE_PATH=\"$BUILD_DIR/.heroku-geo-buildpack/vendor/include:\$CPLUS_INCLUDE_PATH\""
  echo "export C_INCLUDE_PATH=\"$BUILD_DIR/.heroku-geo-buildpack/vendor/include:\$C_INCLUDE_PATH\""
} >> "$BP_DIR/export"

PROFILE_PATH="$BUILD_DIR/.profile.d/heroku-geo-buildpack.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"

# Export vars
# shellcheck disable=SC2016
{
  echo 'export GDAL_LIBRARY_PATH="$HOME/.heroku-geo-buildpack/vendor/lib/libgdal.so"'
  echo 'export GEOS_LIBRARY_PATH="$HOME/.heroku-geo-buildpack/vendor/lib/libgeos_c.so"'
  echo 'export PROJ4_LIBRARY_PATH="$HOME/.heroku-geo-buildpack/vendor/lib/libproj.so"'
  echo 'export GDAL_DATA="$HOME/.heroku-geo-buildpack/vendor/share/gdal"'
  echo 'export PATH="$HOME/.heroku-geo-buildpack/vendor/bin:$PATH"'
  echo 'export LIBRARY_PATH="$HOME/.heroku-geo-buildpack/vendor/lib:$LIBRARY_PATH"'
  echo 'export LD_LIBRARY_PATH="$HOME/.heroku-geo-buildpack/vendor/lib:$LD_LIBRARY_PATH"'
} >> "$PROFILE_PATH"
